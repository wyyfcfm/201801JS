1.闭包
一个函数运行时产生的私有作用域，保护里面的内容不受外界的干扰，这就是闭包，这是浏览器运行的一种机制
 - 封装性
 - 避免冲突和污染
 强调下，闭包可以放在任何地方，只要产生是一个私有的作用域，那就是一个闭包，不是一种形式而是一种机制
 - 若需要内部暴露一些内容给外部时如何操作
  1)作为window的属性
  2)封装在一个对象里返回
  3)返回一个函数

2.内存释放（性能有关）
栈内存：空间小，速度快
  值类型的数据和作用域
  作用域的释放：
  全局作用域：关闭页面或浏览器时释放
  私有作用域：通常情况，函数运行完后就会释放掉（立即销毁）
    作用域不释放：
     - 不立即销毁:若一个函数返回一个需要被执行小函数，这时不会立即销毁，只有等返回的小函数执行后，这个函数才销毁
     - 不销毁:若函数内部的内容被外界给占用了，则这个函数就不销毁

堆内存：空间大，速度慢
  存储引用类型的数据
  堆内存的释放：
  当堆内存引用地址被其他变量占用时，则释放不掉，解决办法：将变量的值设成null，设成空指针，浏览器空闲时就会释放掉这块内存，这种机制称为垃圾回收机制
  例如 f = null;

3.this
  指函数执行的主体 （也就是函数运行时谁调用的这个方法）
  1.函数fn运行时,查看fn前面是否有.,若没有则this是window,若有.,则点前面是谁，this就是谁
  2.自执行函数不管在哪里，通常this是window
  3.事件驱动函数运行里的this是绑定的元素
  for(var i = 0;i<oLis.length;i++){
   oLis[i].onclick = function(){
    this->当前绑定元素
   }
  }



